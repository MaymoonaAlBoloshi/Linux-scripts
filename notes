#!/usr/bin/env bash


set -euo pipefail
IFS=$'\n\t'

# Constants
TODO_DIR="${HOME}/todos"
DEFAULT_NOTEBOOK="main"
EDITOR="${EDITOR:-nvim}"
DATE_FORMAT="+%Y-%m-%d-%H-%M-%S"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

if ! command -v fzf &>/dev/null; then
    echo -e "${RED}fzf is required but not installed. Please install fzf first.${NC}"
    exit 1
fi

# Ensure main notebook exists
mkdir -p "${TODO_DIR}/${DEFAULT_NOTEBOOK}"

CURRENT_NOTEBOOK="${TODO_DIR}/${DEFAULT_NOTEBOOK}"

archive_dir() {
    echo "${CURRENT_NOTEBOOK}/archive"
}

preview_cmd() {
    local f="{}"
    if command -v bat &>/dev/null; then
        echo "bat --style=numbers --color=always --line-range :200 ${CURRENT_NOTEBOOK}/${f}"
    else
        echo "cat ${CURRENT_NOTEBOOK}/${f}"
    fi
}

check_empty_notebook() {
    if [ -z "$(ls -A "${CURRENT_NOTEBOOK}" 2>/dev/null | grep -v '^archive$')" ]; then
        echo -e "${YELLOW}No todos found in this notebook.${NC} Create a new one? (y/n)"
        read -r answer
        if [ "${answer}" = "y" ]; then
            create_new_todo
        fi
    fi
}

trap "echo -e '\n${RED}Aborted.${NC}'; exit 1" INT

banner() {
    echo -e "${CYAN}"
    echo "======================================"
    echo "          SUPER TODO MANAGER"
    echo "======================================"
    echo -e "${NC}"
}

count_todos() {
    ls "${CURRENT_NOTEBOOK}" 2>/dev/null | grep -v "^archive$" | wc -l | tr -d ' '
}

show_status() {
    local count
    count=$(count_todos)
    local nb_name
    nb_name=$(basename "${CURRENT_NOTEBOOK}")
    echo -e "${BLUE}Notebook: ${nb_name} | ${count} todo(s).${NC}"
}

select_todo() {
    ls "${CURRENT_NOTEBOOK}" 2>/dev/null | grep -v "^archive$" | fzf \
        --preview="$(preview_cmd)" \
        --prompt="Select a todo> " \
        --exit-0 \
        --height=40% \
        --border \
        --ansi \
        --reverse \
        --bind j:down,k:up || true
}

archive_todos() {
    mkdir -p "$(archive_dir)"
    if [ -z "$(ls "${CURRENT_NOTEBOOK}" | grep -v '^archive$')" ]; then
        echo -e "${YELLOW}No todos to archive in this notebook.${NC}"
        return
    fi
    confirm "Archive all todos in this notebook?" || { echo "Cancelled."; return; }
    ls "${CURRENT_NOTEBOOK}" | grep -v "^archive$" | while read -r f; do
        [ -f "${CURRENT_NOTEBOOK}/${f}" ] && mv "${CURRENT_NOTEBOOK}/${f}" "$(archive_dir)/${f}"
    done
    echo -e "${GREEN}All todos archived to $(archive_dir)${NC}"
}

search_todos() {
    echo "Enter search query:"
    read -r query
    if [ -z "${query}" ]; then
        echo "No query entered."
        return
    fi
    local results
    results=$(grep -ril "${query}" "${CURRENT_NOTEBOOK}" 2>/dev/null || true)
    if [ -z "${results}" ]; then
        echo "No matches found."
    else
        # Show results in fzf with preview
        # Transform absolute paths to relative for preview
        local relative_files
        relative_files=$(echo "${results}" | sed "s|${CURRENT_NOTEBOOK}/||")
        
        selected_file=$(echo "${relative_files}" | fzf \
            --preview="$(preview_cmd)" \
            --prompt="Search results> " \
            --exit-0 \
            --height=40% \
            --border \
            --ansi \
            --reverse \
            --bind j:down,k:up || true)
        
        if [ -n "${selected_file}" ]; then
            # View and optionally edit the selected file
            echo -e "${CYAN}Viewing ${selected_file}:${NC}"
            if command -v bat &>/dev/null; then
                bat --style=numbers --color=always --line-range :200 "${CURRENT_NOTEBOOK}/${selected_file}"
            else
                cat "${CURRENT_NOTEBOOK}/${selected_file}"
            fi
            echo "Open in editor? (y/n)"
            read -r edit_choice
            if [ "${edit_choice}" = "y" ]; then
                "${EDITOR}" "${CURRENT_NOTEBOOK}/${selected_file}"
            fi
        fi
    fi
}

view_todo() {
    file=$(select_todo)
    if [ -n "${file}" ]; then
        echo -e "${CYAN}Viewing ${file}:${NC}"
        if command -v bat &>/dev/null; then
            bat --style=numbers --color=always --line-range :200 "${CURRENT_NOTEBOOK}/${file}"
        else
            cat "${CURRENT_NOTEBOOK}/${file}"
        fi
        echo "Open in editor? (y/n)"
        read -r edit_choice
        if [ "${edit_choice}" = "y" ]; then
            "${EDITOR}" "${CURRENT_NOTEBOOK}/${file}"
        fi
    else
        echo "No file selected."
    fi
}

help_menu() {
    echo -e "${GREEN}Help:${NC}"
    echo "Use the interactive menu to choose actions."
    echo "Navigate with arrow keys or j/k and press Enter to select."
    echo "Notebooks organize todos into folders. Use 'b' to switch notebooks."
    echo "Use 'm' to manage notebooks (create/delete)."
}

confirm() {
    local prompt="$1"
    echo -e "${YELLOW}${prompt}${NC} (y/n)"
    read -r c
    [ "${c}" = "y" ]
}

switch_notebook() {
    local notebooks
    notebooks=$(find "${TODO_DIR}" -mindepth 1 -maxdepth 1 -type d | grep -v "/archive$" | sed "s|${TODO_DIR}/||")

    if [ -z "${notebooks}" ]; then
        mkdir -p "${TODO_DIR}/${DEFAULT_NOTEBOOK}"
        notebooks="${DEFAULT_NOTEBOOK}"
    fi

    echo "Select a notebook or type new name:"
    selected_nb=$(printf '%s\n' ${notebooks} | fzf \
        --prompt="Notebooks> " \
        --height=40% \
        --border \
        --ansi \
        --reverse \
        --bind j:down,k:up)

    if [ -z "${selected_nb}" ]; then
        echo "No notebook selected."
        return
    fi

    if ! printf '%s\n' ${notebooks} | grep -q "^${selected_nb}$"; then
        confirm "Create new notebook '${selected_nb}'?" || { echo "Cancelled."; return; }
        mkdir -p "${TODO_DIR}/${selected_nb}"
        echo -e "${GREEN}Notebook '${selected_nb}' created.${NC}"
    fi

    CURRENT_NOTEBOOK="${TODO_DIR}/${selected_nb}"
    mkdir -p "$(archive_dir)"
    check_empty_notebook
}

create_new_todo() {
    echo "Enter todo name (leave empty for date-based name):"
    read -r todo_name
    if [ -z "${todo_name}" ]; then
        todo_name="$(date "${DATE_FORMAT}").md"
    else
        [[ "${todo_name}" == *.md ]] || todo_name="${todo_name}.md"
    fi

    touch "${CURRENT_NOTEBOOK}/${todo_name}"
    echo -e "${GREEN}Created new todo: ${todo_name}${NC}"
    # Edit immediately
    "${EDITOR}" "${CURRENT_NOTEBOOK}/${todo_name}"
}

manage_notebooks() {
    # Manage notebooks: create or delete
    # main always exists and should not be deleted
    while true; do
        echo "Notebook Management:"
        echo "  c: Create new notebook"
        echo "  d: Delete a notebook"
        echo "  q: Back"
        read -rp "Enter your choice: " nb_choice
        case "${nb_choice}" in
            c)
                echo "Enter new notebook name:"
                read -r new_nb
                if [ -z "${new_nb}" ]; then
                    echo "No name provided."
                else
                    # Check if exists
                    if [ -d "${TODO_DIR}/${new_nb}" ]; then
                        echo "Notebook '${new_nb}' already exists."
                    else
                        mkdir -p "${TODO_DIR}/${new_nb}"
                        echo -e "${GREEN}Notebook '${new_nb}' created.${NC}"
                    fi
                fi
                ;;
            d)
                # Delete a notebook
                # List all notebooks except main and current if current=main
                available_nbs=$(find "${TODO_DIR}" -mindepth 1 -maxdepth 1 -type d | sed "s|${TODO_DIR}/||" | grep -v "^${DEFAULT_NOTEBOOK}$")
                if [ -z "${available_nbs}" ]; then
                    echo "No notebooks to delete except '${DEFAULT_NOTEBOOK}'."
                else
                    del_nb=$(printf '%s\n' ${available_nbs} | fzf \
                        --prompt="Select notebook to delete> " \
                        --height=40% \
                        --border \
                        --ansi \
                        --reverse \
                        --bind j:down,k:up)
                    if [ -n "${del_nb}" ]; then
                        confirm "Are you sure you want to delete notebook '${del_nb}'?" && rm -rf "${TODO_DIR}/${del_nb}" && echo -e "${RED}Notebook '${del_nb}' deleted.${NC}"
                        # If we deleted the current notebook, switch back to main
                        if [ "${TODO_DIR}/${del_nb}" = "${CURRENT_NOTEBOOK}" ]; then
                            CURRENT_NOTEBOOK="${TODO_DIR}/${DEFAULT_NOTEBOOK}"
                        fi
                    else
                        echo "No notebook selected."
                    fi
                fi
                ;;
            q)
                break
                ;;
            *)
                echo "Invalid choice."
                ;;
        esac
    done
}

banner
check_empty_notebook
show_status

menu_items=(
    "n: New todo"
    "e: Edit a todo"
    "r: Rename a todo"
    "d: Delete a todo"
    "s: Search todos"
    "v: View a todo"
    "a: Archive all todos"
    "b: Switch notebook"
    "m: Manage notebooks"
    "h: Help"
    "q: Quit"
)

while true; do
    choice=$(printf '%s\n' "${menu_items[@]}" | fzf \
        --prompt="Choose an action> " \
        --height=40% \
        --border \
        --ansi \
        --reverse \
        --disabled \
        --bind j:down,k:up \
        --bind /:ignore,?:ignore \
        --bind a:ignore,b:ignore,c:ignore,d:ignore,e:ignore,f:ignore,g:ignore,h:ignore,i:ignore,j:down,k:up,l:ignore,m:ignore,n:ignore,o:ignore,p:ignore,q:ignore,r:ignore,s:ignore,t:ignore,u:ignore,v:ignore,w:ignore,x:ignore,y:ignore,z:ignore \
    ) || break

    action="${choice%%:*}"

    case "${action}" in
        n)
            create_new_todo
            show_status
            ;;
        e)
            file=$(select_todo)
            if [ -n "${file}" ]; then
                "${EDITOR}" "${CURRENT_NOTEBOOK}/${file}"
            else
                echo "No file selected."
            fi
            ;;
        r)
            file=$(select_todo)
            if [ -n "${file}" ]; then
                echo "Enter new name for ${file}:"
                read -r new_name
                if [ -n "${new_name}" ]; then
                    [[ "${new_name}" == *.md ]] || new_name="${new_name}.md"
                    mv "${CURRENT_NOTEBOOK}/${file}" "${CURRENT_NOTEBOOK}/${new_name}"
                    echo -e "${GREEN}Renamed ${file} to ${new_name}${NC}"
                else
                    echo "No new name provided."
                fi
            else
                echo "No file selected."
            fi
            ;;
        d)
            file=$(select_todo)
            if [ -n "${file}" ]; then
                if confirm "Are you sure you want to delete ${file}?"; then
                    rm "${CURRENT_NOTEBOOK}/${file}"
                    echo -e "${RED}Deleted ${file}${NC}"
                else
                    echo "Cancelled."
                fi
            else
                echo "No file selected."
            fi
            show_status
            ;;
        s)
            search_todos
            ;;
        v)
            view_todo
            ;;
        a)
            archive_todos
            show_status
            ;;
        b)
            switch_notebook
            show_status
            ;;
        m)
            manage_notebooks
            show_status
            ;;
        h)
            help_menu
            ;;
        q)
            echo -e "${GREEN}Goodbye!${NC}"
            break
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac
    echo
done
