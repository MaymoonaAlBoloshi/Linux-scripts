#!/usr/bin/env bash


set -euo pipefail
IFS=$'\n\t'

MOOD_DIR="${HOME}/.moodtracker"
LOG_DIR="${MOOD_DIR}/logs"
EDITOR="${EDITOR:-nvim}"
DATE_FORMAT="+%Y-%m-%d"

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
NC='\033[0m'

mkdir -p "${LOG_DIR}"

if ! command -v gum &>/dev/null; then
    echo -e "${RED}gum is required but not installed.${NC}"
    exit 1
fi

if ! command -v fzf &>/dev/null; then
    echo -e "${RED}fzf is required but not installed.${NC}"
    exit 1
fi

if ! command -v awk &>/dev/null; then
    echo -e "${RED}awk is required but not installed.${NC}"
    exit 1
fi

trap "echo -e '\n${RED}Aborted.${NC}'; exit 1" INT

bar() {
    echo -e "${MAGENTA}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

banner() {
    clear
    echo -e "${CYAN}"
    echo "   __  ___           __    "
    echo "  /  |/  /___ ______/ /__  "
    echo " / /|_/ / __  / ___/ / _ \\ "
    echo "/ /  / / /_/ / /  / /  __/ "
    echo "/_/  /_/\\__,_/_/  /_/\\___/  MOOD TRACKER"
    echo -e "${NC}"
    bar
}

confirm() {
    local prompt="$1"
    gum confirm "${prompt}"
}

bat_or_cat() {
    if command -v bat &>/dev/null; then
        bat --style=numbers --color=always --line-range :200 "$@"
    else
        cat "$@"
    fi
}

log_preview_cmd() {
    if command -v bat &>/dev/null; then
        echo "bat --style=numbers --color=always --line-range :200 {}"
    else
        echo "cat {}"
    fi
}

select_entry() {
    find "${LOG_DIR}" -type f -name "*.md" 2>/dev/null | sort \
    | fzf --prompt="Select an entry> " \
          --exit-0 \
          --height=40% \
          --border \
          --ansi \
          --reverse \
          --bind j:down,k:up \
          --preview="$(log_preview_cmd)" || true
}

create_entry() {
    local today
    today=$(date "${DATE_FORMAT}")
    local log_file="${LOG_DIR}/${today}.md"

    if [ -f "${log_file}" ]; then
        if confirm "Today's entry exists. Edit it?"; then
            "${EDITOR}" "${log_file}"
        fi
        return
    fi

    echo -e "${BLUE}Select your mood rating (1-5):${NC}"
    rating=$(gum choose 1 2 3 4 5)
    if [ -z "${rating}" ]; then
        echo -e "${RED}No rating selected.${NC}"
        return
    fi

    echo -e "${BLUE}Notes (optional):${NC}"
    notes=$(gum input --placeholder "Enter notes or leave blank")

    {
        echo "${rating}"
        [ -n "${notes}" ] && echo "${notes}"
    } > "${log_file}"

    echo -e "${GREEN}Logged mood for ${today} with rating ${rating}.${NC}"
    "${EDITOR}" "${log_file}"
}

view_entry() {
    local entry
    entry=$(select_entry)
    if [ -n "${entry}" ]; then
        bat_or_cat "${entry}"
        if confirm "Open in editor?"; then
            "${EDITOR}" "${entry}"
        fi
    else
        echo "No entry selected."
    fi
}

edit_entry() {
    local entry
    entry=$(select_entry)
    if [ -n "${entry}" ]; then
        "${EDITOR}" "${entry}"
    else
        echo "No entry selected."
    fi
}

delete_entry() {
    local entry
    entry=$(select_entry)
    if [ -z "${entry}" ]; then
        echo "No entry selected."
        return
    fi
    if confirm "Delete this entry?"; then
        rm "${entry}"
        echo -e "${RED}Entry deleted.${NC}"
    else
        echo "Cancelled."
    fi
}

search_entries() {
    echo -e "${BLUE}Enter search query:${NC}"
    query=$(gum input --placeholder "Type a keyword to search")
    if [ -z "${query}" ]; then
        echo "No query entered."
        return
    fi
    results=$(grep -ril "${query}" "${LOG_DIR}" 2>/dev/null || true)
    if [ -z "${results}" ]; then
        echo "No matches found."
        return
    fi

    selected_file=$(echo "${results}" | fzf \
        --prompt="Search results> " \
        --height=40% \
        --border \
        --ansi \
        --reverse \
        --bind j:down,k:up \
        --preview='[ -f {} ] && bat --style=numbers --color=always --line-range :200 {} || cat {}') || true

    if [ -n "${selected_file}" ]; then
        bat_or_cat "${selected_file}"
        if confirm "Open in editor?"; then
            "${EDITOR}" "${selected_file}"
        fi
    fi
}

# Color mapping for the graph
map_color() {
    local r="$1"
    case "$r" in
        1) echo -ne "\033[48;5;120m  \033[0m";; 
        2) echo -ne "\033[48;5;34m  \033[0m";;
        3) echo -ne "\033[48;5;28m  \033[0m";;
        4) echo -ne "\033[48;5;22m  \033[0m";;
        5) echo -ne "\033[48;5;19m  \033[0m";;
        *) echo -ne "\033[48;5;238m  \033[0m";; # no data
    esac
}

collect_data() {
    DAYS=30
    today_ts=$(date +%s)
    ratings=()
    dates=()
    for ((i=DAYS-1; i>=0; i--)); do
        day_ts=$(( today_ts - i*86400 ))
        day_str=$(date -d "@$day_ts" "${DATE_FORMAT}")
        log_file="${LOG_DIR}/${day_str}.md"
        if [ -f "${log_file}" ]; then
            rating=$(head -n 1 "${log_file}")
            [[ "$rating" =~ ^[1-5]$ ]] || rating="0"
        else
            rating="0"
        fi
        ratings+=("$rating")
        dates+=("${day_str}")
    done
}

show_graph() {
    collect_data
    echo -e "${CYAN}Last 30 days mood:${NC}"
    bar
    for r in "${ratings[@]}"; do
        map_color "$r"
        echo -n " "
    done
    echo
    bar
    echo -e "${YELLOW}(Left = oldest, Right = most recent)${NC}"
    echo
}

show_analytics() {
    collect_data
    sum=0
    count=0
    declare -A freq
    freq=( [1]=0 [2]=0 [3]=0 [4]=0 [5]=0 )
    best_rating=-1
    best_day=""
    worst_rating=999
    worst_day=""

    sum_weekday=0
    count_weekday=0
    sum_weekend=0
    count_weekend=0

    # Process data
    for ((i=0; i<${#ratings[@]}; i++)); do
        r=${ratings[$i]}
        d=${dates[$i]}
        if [[ "$r" =~ ^[1-5]$ ]]; then
            val=$((r))
            (( sum+=val ))
            (( count++ ))
            (( freq[$val]++ ))
            # best/worst
            if (( val > best_rating )); then
                best_rating=$val
                best_day=$d
            fi
            if (( val < worst_rating )); then
                worst_rating=$val
                worst_day=$d
            fi
            # weekend vs weekday
            dow=$(date -d "$d" +%u)
            if (( dow == 6 || dow == 7 )); then
                (( sum_weekend+=val ))
                (( count_weekend++ ))
            else
                (( sum_weekday+=val ))
                (( count_weekday++ ))
            fi
        fi
    done

    echo -e "${CYAN}Analytics (Last 30 Days):${NC}"
    bar
    if (( count == 0 )); then
        echo "No mood data available."
        bar
        echo
        return
    fi

    avg=$(awk -v s="$sum" -v c="$count" 'BEGIN {printf "%.2f", (c>0)?s/c:0}')
    echo -e "${GREEN}Average rating:${NC} $avg"
    echo -e "${GREEN}Occurrences per rating:${NC}"
    for rr in 1 2 3 4 5; do
        echo "  Rating $rr: ${freq[$rr]} day(s)"
    done

    echo -e "${GREEN}Best day:${NC} $best_day (Rating: $best_rating)"
    echo -e "${GREEN}Worst day:${NC} $worst_day (Rating: $worst_rating)"

    if (( count_weekday > 0 )); then
        avg_weekday=$(awk -v s="$sum_weekday" -v c="$count_weekday" 'BEGIN {printf "%.2f", (c>0)?s/c:0}')
    else
        avg_weekday="N/A"
    fi

    if (( count_weekend > 0 )); then
        avg_weekend=$(awk -v s="$sum_weekend" -v c="$count_weekend" 'BEGIN {printf "%.2f", (c>0)?s/c:0}')
    else
        avg_weekend="N/A"
    fi

    echo -e "${GREEN}Average weekday rating:${NC} $avg_weekday"
    echo -e "${GREEN}Average weekend rating:${NC} $avg_weekend"

    # Compare weekend vs weekday if both are available
    if [[ "$avg_weekday" != "N/A" && "$avg_weekend" != "N/A" ]]; then
        # Use awk for comparison
        if awk "BEGIN {exit !($avg_weekend > $avg_weekday)}"; then
            echo "You tend to have a better mood on weekends!"
        elif awk "BEGIN {exit !($avg_weekend < $avg_weekday)}"; then
            echo "You tend to have a better mood on weekdays!"
        else
            echo "Your mood is about the same on weekdays and weekends."
        fi
    fi

    bar
    echo
}

help_menu() {
    echo -e "${GREEN}Help:${NC}"
    bar
    echo "Track your daily mood (1-5) and optional notes."
    echo "View, edit, delete, or search entries."
    echo "Display a color-coded ASCII graph of the last 30 days."
    echo "Analytics: View average ratings, best/worst day, and weekend vs weekday trends."
    echo "Use gum-powered menus for a pleasant TUI experience."
    bar
}

banner

while true; do
    choice=$(gum choose \
        "Create/Update today's entry (c)" \
        "View an entry (v)" \
        "Edit an entry (e)" \
        "Delete an entry (d)" \
        "Search entries (s)" \
        "Show graph (g)" \
        "Analytics (a)" \
        "Help (h)" \
        "Quit (q)")

    action=$(echo "$choice" | sed 's/.*(\(.\)).*/\1/')

    case "${action}" in
        c) create_entry ;;
        v) view_entry ;;
        e) edit_entry ;;
        d) delete_entry ;;
        s) search_entries ;;
        g) show_graph ;;
        a) show_analytics ;;
        h) help_menu ;;
        q)
            echo -e "${GREEN}Goodbye!${NC}"
            break
            ;;
        *)
            echo "Invalid choice."
            ;;
    esac
    echo
done
